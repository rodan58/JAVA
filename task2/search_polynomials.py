# 2 Полиномы
# Напишите программу, которая принимает в качестве аргумента 
# командной строки коэффициенты в знаменателе. Найдите сумму 
# членов ряда.
#     Пример: 
#             python3 main.py --poly=1,2,3,4,5 [-v]
#     эквивалентно
#             1/1*3 + 1/2*3 + 1/3*3 + 1/4*3 + 1/5*3

import sys, argparse


class CliApp:

	def __init__(self, argv=sys.argv[1:]):
		"""Консольное приложение 
			argv - ргументы переданные через консоль, все помимо
				первого, т.к. первый аргумент название файла"""
		self.argv = argv

	def create_parser(self):
		"""Создаёт парсер для разбора аргументов командной строки,
			параметры который парсер принимает:
			--poly="строка с числами через запятую"
				- указание кооэфицентов
			-v "число" - указание знаменателя, по умолчанию 3
		"""
		# создаём парсер для считывания аргументов переданных через консоль
		# по умолчанию: argparse.ArgumentParser(sys.argv[1]),
		# так чтоничего не передаём, а можно было передать аргументы
		# с которыми была вызвана прогрмамма через консоль
		self.parser = argparse.ArgumentParser()
		# добавляем другие аргументы
		# после параметра --poly можно указывать =1,2,3
		# любое количество символов
		self.parser.add_argument('--poly', nargs='+')
		# после параметра -v можно указывать одно число, по умолчанию 3
		self.parser.add_argument('-v', nargs='?', default=3, type=int)
		# пространнство для аргументов и их значений
		self.namespace = self.parser.parse_args(self.argv)

	def __call__(self):
		"""Метод, который позволяет вызвать объект класса как функцию
			по типу:
			obj = Class()
			obj()	# запускается метод __call__()
		"""
		# создаём объект парсера
		self.create_parser()
		# извлекаем значения из аргументов
		self.extract_values()
		# из извлечённых значений создаём результат
		self.make_result()
		print(self.result)

	def extract_values(self):
		"""Извлекаем аргументы и переданные через консоль и из них
			создаём поля:
			poly_values - список чисел (int) коэффициенты
			v - знаменатель!?
		"""
		# берём значение аргумента poly, строку и делим на мини строки
		# через запятую, из них делаем целые числа
		self.poly_values = list(map(int, self.namespace.poly[0].split(',')))
		self.v = self.namespace.v
		#print(self.poly_values, self.v)
	
	def make_result(self):
		"""Вычисляем результат сохраняем в result"""
		self.result = sum(map(
			lambda value: 1 / value * self.v, self.poly_values))


# приложение нужно запускать так:
# 
# $ filename.py --poly="строка цифр через запятую" -v "число" (необзательно)
# 
# где filename.py - полное имя файла (например: "C:\folder\file.py"), 
# иначе переходить в папку с этой программой и filename (например: "file.py")
if __name__ == '__main__':
	# print(sys.argv)
	# создаём объект приложения, но пока он не активен
	app = CliApp()
	# для того чтобы приложение запустить, нужно запустить 
	# его метод __call__()
	# во время вызова совершаются все нужные действия
	app()